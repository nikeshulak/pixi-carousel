{"version":3,"sources":["Circle.js","Director.js","Slide.js","SlideManagerBase.js","SlideManager.js"],"names":["Circle","options","this","radius","position","x","y","color","color_active","fillAlpha","fillAlpha_active","Director","width","height","now","dt","then","Date","WIDTH","HEIGHT","Slide","img_src","img","width_cached","height_cached","anchor","cached_position","temp_position","SlideManagerBase","call","SLIDE_DURATION","slide_duration","SLIDE_PERCENT_Y","slide_percent_y","CIRCLE_COLOR","circle_color","CIRCLE_COLOR_ACTIVE","circle_color_active","CIRCLE_FILLALPHA","circle_fillAlpha","CIRCLE_FILLALPHA_ACTIVE","circle_fillAlpha_active","CIRCLE_RADIUS","circle_radius","CIRCLE_MARGIN","circle_margin","CIRCLE_PERCENT_Y","circle_percent_y","BKG_COLOR","bkg_color","SCALES","CROP","STRETCH","FIT","scale","has_circles","speed","is_accelerated","initial_speed","acceleration","is_auto_slide","interval","zoom_ratio","zoom_interval","states","still","duration","sliding_left","sliding_right","zoomming_in","zoomming_out","inspecting","state","state_time","slides","slide_count","circles","is_position_adjusted","onInit","onSlideBegin","onSlideEnd","SlideManager","textures","sprites","graphics","PIXI","Graphics","stage","Container","renderer","CanvasRenderer","view","backgroundColor","prototype","animate","requestAnimationFrame","bind","updateAndRender","update","render","cache_position","restoreCachedPosition","saveTempPosition","cache_size","Object","create","getZoomedLength","length_cached","Math","log","sqrt","zoomIn","slide","getActiveSlide","zoomOut","slideLeft","active_slide","offset","i","adjustCircles","updateSliding","adjustPosition","sign","delta_s","pow","getSpeed","length","reduce","s1","s2","abs","getActiveIndex","indexOf","active_index","len","left_slide","right_slide","cache_slide_positions","slideRight","panTo","startAutoSlide","stopAutoSlide","setSlidesAndStart","img_srcs","setSlides","init","push","left_circle_x","aspRatio","circle","renderCircles","sl","sp","clear","cir","beginFill","drawCircle","endFill","basetex","BaseTexture","tex","Texture","fromImage","Sprite","addChild"],"mappings":"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","file":"pixi-carousel.min.js","sourcesContent":["function Circle(options) {\n  options = options || {};\n  this.radius = options.radius || 5;\n  this.position = options.position || {x: 0, y: 0};\n  this.color =  options.color || 0x000000;\n  this.color_active =  options.color_active || 0x000000;\n  this.fillAlpha =  options.fillAlpha || 0.9;\n  this.fillAlpha_active =  options.fillAlpha_active || 0.5;\n}","function Director(width, height, options) {\n  this.now;\n  this.dt;\n  this.then = Date.now();\n  \n  options = options || {};\n  this.WIDTH = width || 640;\n  this.HEIGHT = height || 480;\n}\n\nDirector.prototype.animate = function() {\n  // don't override!\n  this.now = Date.now();\n  this.dt = this.now - this.then;\n\n  requestAnimationFrame(this.animate.bind(this));\n  this.updateAndRender(this.dt);\n  \n  this.then = this.now;\n};\n\nDirector.prototype.updateAndRender = function(dt) {\n  // must override!\n  this.update(dt);\n  this.render();\n};\n\nDirector.prototype.update = function(dt) {\n  // must override!\n};\n\nDirector.prototype.render = function() {\n  // must override!\n};\n\n","function Slide(width, height, img_src, img) {\n  this.width = width || 640;\n  this.height = height || 480;\n  this.width_cached = this.width;\n  this.height_cached = this.height;\n  this.height = height;\n  this.img_src = img_src;\n  this.img = img || null;\n\n  this.anchor = {x: 0.5, y: 0.5};\n  this.position = {x: 0, y: 0};\n  this.cached_position = {x: 0, y: 0};\n  this.temp_position = {x: 0, y: 0};\n}\n\nSlide.prototype.cache_position = function() {\n  this.cached_position.x = this.position.x;\n  this.cached_position.y = this.position.y;\n};\n\nSlide.prototype.restoreCachedPosition = function() {\n  this.position.x = this.cached_position.x;\n  this.position.y = this.cached_position.y;\n};\n\nSlide.prototype.saveTempPosition = function() {\n  this.temp_position.x = this.position.x;\n  this.temp_position.y = this.position.y;\n};\n\nSlide.prototype.cache_size = function() {\n  this.width_cached = this.width;\n  this.height_cached = this.height;\n};\n","SlideManagerBase.prototype = Object.create(Director.prototype);\n\nfunction SlideManagerBase(width, height, options) {\n  Director.call(this, width, height, options);\n  options = options || {};\n  this.SLIDE_DURATION = options.slide_duration || 300;\n  this.SLIDE_PERCENT_Y = options.slide_percent_y || 0.5;\n  // SLIDE_PERCENT_Y only effect when scale is CROP\n  this.CIRCLE_COLOR = options.circle_color || 0x000000;\n  this.CIRCLE_COLOR_ACTIVE = options.circle_color_active || 0x000000;\n  this.CIRCLE_FILLALPHA = options.circle_fillAlpha || 0.9;\n  this.CIRCLE_FILLALPHA_ACTIVE = options.circle_fillAlpha_active || 0.5;\n  this.CIRCLE_RADIUS = options.circle_radius || 8;\n  this.CIRCLE_MARGIN = options.circle_margin || 25;\n  this.CIRCLE_PERCENT_Y = options.circle_percent_y || 0.9;\n  this.BKG_COLOR = options.bkg_color || 0x000000;\n\n  this.SCALES = {\n    CROP: {},\n    STRETCH: {},\n    FIT: {}\n  };\n  this.scale = null;\n\n  this.has_circles = options.has_circles || false;\n  this.speed = this.WIDTH / this.SLIDE_DURATION;\n  this.is_accelerated = options.is_accelerated || false;\n  this.initial_speed = this.is_accelerated ? (2 * this.WIDTH / this.SLIDE_DURATION) : this.speed;\n  this.acceleration = this.is_accelerated ? (this.initial_speed / this.SLIDE_DURATION) : 0;\n\n  this.is_auto_slide = options.is_auto_slide || false;\n  this.interval = options.interval || 1000;\n\n  this.zoom_ratio = options.zoom_ratio || 2;\n  this.zoom_interval = options.zoom_interval || 300;\n\n  this.states = {\n    still: {duration: null},\n    sliding_left: {duration: this.SLIDE_DURATION},\n    sliding_right: {duration: this.SLIDE_DURATION},\n    zoomming_in: {},\n    zoomming_out: {},\n    inspecting: {}\n  };\n  this.state = this.states.still;\n  this.state_time = 0;\n  this.slides = [];\n  this.slide_count = 0;\n  this.circles = [];\n\n  this.is_position_adjusted = false;\n\n  this.onInit = options.onInit || null;\n  this.onSlideBegin = options.onSlideBegin || null;\n  this.onSlideEnd = options.onSlideEnd || null;\n}\n\nSlideManagerBase.prototype.getZoomedLength = function (length_cached, state_time) {\n  return 0.37 * length_cached * Math.log(state_time + (1 + Math.sqrt(1 + 4 * this.zoom_interval)) / 2);\n};\n\nSlideManagerBase.prototype.zoomIn = function () {\n  if (this.state !== this.states.still) {\n    return;\n  }\n  this.state = this.states.zoomming_in;\n  this.state_time = 0;\n  var slide = this.getActiveSlide();\n  if (slide) {\n    slide.cache_position();\n    slide.saveTempPosition();\n    slide.cache_size();\n  }\n};\n\nSlideManagerBase.prototype.zoomOut = function () {\n  if (this.state !== this.states.inspecting) {\n    return;\n  }\n  var slide = this.getActiveSlide();\n  if (slide) {\n    slide.restoreCachedPosition();\n  }\n  this.state = this.states.zoomming_out;\n  this.state_time = 0;\n};\n\nSlideManagerBase.prototype.update = function (dt) {\n  Director.prototype.update.call(this, dt);\n  if (this.slide_count < 2) {\n    return;\n  }\n\n  this.state_time += dt;\n  switch (this.state) {\n    case this.states.still:\n      if (this.is_auto_slide === true && this.state_time > this.interval) {\n        this.slideLeft();\n      }\n      break;\n    case this.states.zoomming_in:\n      if (this.state_time > this.zoom_interval) {\n        this.state = this.states.inspecting;\n        this.state_time = 0;\n      } else {\n        var slide = this.getActiveSlide();\n        slide.width = this.getZoomedLength(slide.width_cached, this.state_time);\n        slide.height = this.getZoomedLength(slide.height_cached, this.state_time);\n      }\n      break;\n    case this.states.zoomming_out:\n      var slide = this.getActiveSlide();\n      if (this.state_time > this.zoom_interval) {\n        this.state = this.states.still;\n        this.state_time = 0;\n        slide.width = slide.width_cached;\n        slide.height = slide.height_cached;\n      } else {\n        slide.width = 3 * slide.width_cached - this.getZoomedLength(slide.width_cached, this.state_time);\n        slide.height = 3 * slide.height_cached - this.getZoomedLength(slide.height_cached, this.state_time);\n      }\n      break;\n    case this.states.inspecting:\n    default:\n      // sliding\n      if (this.state_time > this.state.duration) {\n//      this.is_position_adjusted = false;\n//      this.adjustPosition();\n        // sliding finished\n        if (this.onSlideEnd) {\n          this.onSlideEnd();\n        }\n        var active_slide = this.getActiveSlide();\n        var offset = this.WIDTH / 2 - active_slide.position.x;\n        for (var i = 0; i < this.slide_count; i++) {\n          this.slides[i].position.x += offset;\n        }\n        this.state = this.states.still;\n        this.state_time = this.state_time - this.state.duration;\n        this.adjustCircles();\n      } else {\n        // sliding not finished\n        switch (this.state) {\n          case this.states.sliding_left:\n            this.updateSliding();\n            break;\n          case this.states.sliding_right:\n            this.updateSliding();\n            break;\n          default:\n            break;\n        }\n        this.adjustPosition();\n      }\n      break;\n  }\n};\n\nSlideManagerBase.prototype.updateSliding = function () {\n  var sign = this.state === this.states.sliding_left ? -1 : 1;\n  for (var i = 0; i < this.slide_count; i++) {\n    var delta_s = this.initial_speed * this.state_time - 0.5 * this.acceleration * Math.pow(this.state_time, 2);\n    this.slides[i].position.x = this.slides[i].cached_position.x + sign * delta_s;\n  }\n};\n\nSlideManagerBase.prototype.getSpeed = function () {\n  if (this.state === this.states.still) {\n    return 0;\n  }\n\n  if (this.is_accelerated) {\n    return this.initial_speed - this.acceleration * this.state_time;\n  } else {\n    return this.initial_speed;\n  }\n};\n\nSlideManagerBase.prototype.getActiveSlide = function () {\n  // the nearest slide\n  if (!this.slides.length) {\n    return false;\n  }\n  var slide = this.slides.reduce(function (s1, s2) {\n    return Math.abs(s1.position.x - this.WIDTH / 2) < Math.abs(s2.position.x - this.WIDTH / 2) ? s1 : s2;\n  }.bind(this));\n  return slide;\n};\n\nSlideManagerBase.prototype.getActiveIndex = function () {\n  if (!this.slides.length) {\n    return false;\n  }\n  // the nearest slide\n  return this.slides.indexOf(this.getActiveSlide());\n};\n\nSlideManagerBase.prototype.adjustCircles = function () {\n  var active_index = this.slides.indexOf(this.getActiveSlide());\n  for (var i = 0, len = this.circles.length; i < len; i++) {\n    this.circles[i].color = this.CIRCLE_COLOR;\n    this.circles[i].fillAlpha = this.CIRCLE_FILLALPHA;\n  }\n  this.circles[active_index].color = this.CIRCLE_COLOR_ACTIVE;\n  this.circles[active_index].fillAlpha = this.CIRCLE_FILLALPHA_ACTIVE;\n};\n\nSlideManagerBase.prototype.adjustPosition = function () {\n  if (this.is_position_adjusted) {\n    return;\n  }\n  var left_slide = this.slides.reduce(function (s1, s2) {\n    return s1.position.x < s2.position.x ? s1 : s2;\n  }.bind(this));\n  var right_slide = this.slides.reduce(function (s1, s2) {\n    return s1.position.x > s2.position.x ? s1 : s2;\n  }.bind(this));\n  if (this.state === this.states.sliding_left && left_slide.position.x < this.WIDTH / 2 && left_slide !== this.getActiveSlide()) {\n    left_slide.position.x = right_slide.position.x + this.WIDTH;\n    left_slide.cached_position.x = right_slide.cached_position.x + this.WIDTH;\n  } else if (this.state === this.states.sliding_right && right_slide.position.x > this.WIDTH / 2 && right_slide !== this.getActiveSlide()) {\n    right_slide.position.x = left_slide.position.x - this.WIDTH;\n    right_slide.cached_position.x = left_slide.cached_position.x - this.WIDTH;\n  }\n  this.is_position_adjusted = true;\n};\n\nSlideManagerBase.prototype.slideLeft = function () {\n  if (this.state !== this.states.still) {\n    return;\n  }\n  if (this.onSlideBegin) {\n    this.onSlideBegin();\n  }\n  this.is_position_adjusted = false;\n  this.cache_slide_positions();\n  this.state = this.states.sliding_left;\n  this.state_time = 0;\n};\n\nSlideManagerBase.prototype.slideRight = function () {\n  if (this.state !== this.states.still) {\n    return;\n  }\n  if (this.onSlideBegin) {\n    this.onSlideBegin();\n  }\n  this.is_position_adjusted = false;\n  this.cache_slide_positions();\n  this.state = this.states.sliding_right;\n  this.state_time = 0;\n};\n\nSlideManagerBase.prototype.panTo = function (x, y) {\n  if (this.state !== this.states.inspecting) {\n    return;\n  }\n  var slide = this.getActiveSlide();\n  if (slide) {\n    if (x - 0.5*slide.width >= 0 || x + 0.5*slide.width <= this.WIDTH) {\n    } else {\n      slide.position.x = x;\n    }\n    if (y - 0.5*slide.height >= 0 || y + 0.5*slide.height <= this.HEIGHT) {\n    } else {\n      slide.position.y = y;\n    }\n  }\n};\n\nSlideManagerBase.prototype.startAutoSlide = function (interval) {\n  this.interval = interval || this.interval;\n  this.is_auto_slide = true;\n};\n\nSlideManagerBase.prototype.stopAutoSlide = function () {\n  this.is_auto_slide = false;\n};\n\nSlideManagerBase.prototype.cache_slide_positions = function () {\n  for (var i = 0; i < this.slide_count; i++) {\n    this.slides[i].cache_position();\n  }\n};\n\nSlideManagerBase.prototype.setSlidesAndStart = function (img_srcs, options) {\n  this.setSlides(img_srcs, options);\n  this.init();\n  this.animate();\n};\n\nSlideManagerBase.prototype.setSlides = function (img_srcs, options) {\n  options = options || {};\n  var width = options.width || this.WIDTH;\n  var height = options.height || this.HEIGHT;\n  this.slide_count = img_srcs.length;\n  for (var i = 0; i < this.slide_count; i++) {\n    if (typeof(img_srcs[i]) === 'string') {\n      this.slides.push(new Slide(width, height, img_srcs[i], null));\n    } else {\n      this.slides.push(new Slide(width, height, null, img_srcs[i]));\n    }\n  }\n};\n\nSlideManagerBase.prototype.init = function () {\n  // position slides and circles\n  var len = this.slide_count;\n  var left_circle_x = this.WIDTH / 2 - (len - 1) * this.CIRCLE_MARGIN / 2;\n  for (var i = 0; i < len; i++) {\n    var slide = this.slides[i];\n\n//    slide.width = this.WIDTH;\n//    slide.height = this.HEIGHT;\n    slide.anchor.x = 0.5;\n    slide.anchor.y = 0.5;\n    slide.position.x = this.WIDTH / 2 + i * this.WIDTH;\n    slide.position.y = this.HEIGHT * this.SLIDE_PERCENT_Y;\n\n    switch (this.scale) {\n      case this.SCALES.STRETCH:\n        slide.width = this.WIDTH;\n        slide.height = this.HEIGHT;\n        slide.position.y = this.HEIGHT * 0.5;\n      case this.SCALES.FIT:\n        var aspRatio = slide.width / slide.height;\n        if (aspRatio > this.WIDTH / this.HEIGHT) {\n          slide.width = this.WIDTH;\n          slide.height = slide.width / aspRatio;\n        } else {\n          slide.height = this.HEIGHT;\n          slide.width = slide.height * aspRatio;\n        }\n      case this.SCALES.CROP:\n      default:\n    }\n\n    var circle = new Circle({\n      radius: this.CIRCLE_RADIUS,\n      position: {x: left_circle_x + this.CIRCLE_MARGIN * i, y: this.HEIGHT * this.CIRCLE_PERCENT_Y},\n      color: i === 0 ? this.CIRCLE_COLOR_ACTIVE : this.CIRCLE_COLOR,\n      fillAlpha: i === 0 ? this.CIRCLE_FILLALPHA_ACTIVE : this.CIRCLE_FILLALPHA,\n    });\n    this.circles.push(circle);\n  }\n  if (this.onInit) {\n    this.onInit();\n  }\n};","SlideManager.prototype = Object.create(SlideManagerBase.prototype);\n\nfunction SlideManager(width, height, options) {\n  SlideManagerBase.call(this, width, height, options);\n  this.textures = [];\n  this.sprites = [];\n  this.graphics = new PIXI.Graphics();\n//  this.stage = new PIXI.Stage(this.BKG_COLOR);   // pixi 2\n  this.stage = new PIXI.Container();\n//  this.renderer = new PIXI.CanvasRenderer(width, height, {view: options.view}, true);\n  this.renderer = new PIXI.CanvasRenderer(width, height, {view: options.view, backgroundColor: this.BKG_COLOR}, true);   // pixi 3\n}\n\nSlideManager.prototype.render = function() {\n//  SlideManagerBase.prototype.render.call(this);\n  if (this.has_circles) {\n    this.renderCircles();\n  }\n  for (var i = 0, len = this.slide_count; i < len; i++) {\n    var sl = this.slides[i];\n    var sp = this.sprites[i];\n    sp.width = sl.width;\n    sp.height = sl.height;\n  }\n  this.renderer.render(this.stage);\n};\n\nSlideManager.prototype.renderCircles = function() {\n  this.graphics.clear();\n  var len = this.circles.length;\n  if (len > 1) {\n    for (var i = 0; i < len; i++) {\n      var cir = this.circles[i];\n      this.graphics.beginFill(cir.color);\n      this.graphics.fillAlpha = cir.fillAlpha;\n      this.graphics.drawCircle(cir.position.x, cir.position.y, cir.radius);\n      this.graphics.endFill();\n    }\n  }\n};\n\nSlideManager.prototype.init = function () {\n  SlideManagerBase.prototype.init.call(this);\n  for (var i = 0, len = this.slide_count; i < len; i++) {\n    var sl = this.slides[i];\n    if (sl.img) {\n      var basetex = new PIXI.BaseTexture(sl.img);\n      var tex = new PIXI.Texture(basetex);\n    } else {\n      var tex = PIXI.Texture.fromImage(sl.img_src);\n    }\n    this.textures.push(tex);\n    var sp = new PIXI.Sprite(tex);\n    sp.width = sl.width;\n    sp.height = sl.height;\n    sp.anchor = sl.anchor;\n    sp.position = sl.position;\n    this.sprites.push(sp);\n    this.stage.addChild(sp);\n    \n    if (this.has_circles) {\n      var cir = this.circles[i];\n      this.graphics.beginFill(0xFFFFFF);\n      this.graphics.fillAlpha = cir.fillAlpha;\n      this.graphics.drawCircle(cir.position.x, cir.position.y, cir.radius);\n      this.graphics.endFill();\n    }\n    this.stage.addChild(this.graphics);\n  }\n  //this.graphics.lineStyle(0, 0x000000, 1);\n};\n"],"sourceRoot":"/source/"}